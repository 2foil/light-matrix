/**
 * @file norminv_impl.h
 *
 * @brief Implementation of norminv function
 *
 * Reference: Michael J. Wichura, Applied Statistics,
 * 		      vol. 37, 1988, pp. 477-484.
 *
 * @author Dahua Lin
 */

#ifdef _MSC_VER
#pragma once
#endif

#ifndef LIGHTMAT_NORMINV_IMPL_H_
#define LIGHTMAT_NORMINV_IMPL_H_

namespace lmat { namespace math { namespace internal {


	template<typename T> struct norminv_impl;

	template<>
	struct norminv_impl<float>
	{
		static float eval(float x)
		{
		    float ret_val;
		    float q = x - .5f;

		    if (abs(q) <= .425f)
			{
				float r__ = .180625f - q * q;
				ret_val = q *
					(((r__ * 59.10937472f + 159.29113202f) * r__
						+ 50.434271938f) * r__ + 3.3871327179f) /
					(((r__ * 67.1875636f + 78.757757664f) * r__
						+ 17.895169469f) * r__ + 1.f);
		    }
			else
			{
				float r__ = q < 0.f ? x : 1.f - x;
				if (r__ < 0.f) r__ = 0.f;

				r__ = sqrtf(-logf(r__));

				if (r__ <= 5.f)
				{
			    	r__ += -1.6f;
			    	ret_val =
						(((r__ * .17023821103f + 1.3067284816f) * r__
							+ 2.75681539f) * r__ + 1.4234372777f) /
						((r__ * .12021132975f + .7370016425f) * r__ + 1.f);
				}
				else
				{
			    	r__ += -5.f;
			    	ret_val =
						(((r__ * .017337203997f + .42868294337f) * r__
							+ 3.081226386f) * r__ + 6.657905115f) /
						((r__ * .012258202635f + .24197894225f) * r__ + 1.f);
				}

				if (q < 0.f) ret_val = -ret_val;
		    }

		    return ret_val;
		}
	};


	template<>
	struct norminv_impl<double>
	{
		static double eval(double x)
		{
		    double ret_val;

		    double q = x - .5;
		    if (abs(q) <= .425)
			{
				double r__ = .180625 - q * q;
				ret_val = q *
					(((((((r__ * 2509.0809287301226727 +
					33430.575583588128105) * r__ + 67265.770927008700853) * r__ +
					45921.953931549871457) * r__ + 13731.693765509461125) * r__ +
					1971.5909503065514427) * r__ + 133.14166789178437745) * r__ +
					3.387132872796366608) /
					(((((((r__ * 5226.495278852854561 +
					28729.085735721942674) * r__ + 39307.89580009271061) * r__ +
					21213.794301586595867) * r__ + 5394.1960214247511077) * r__ +
					687.1870074920579083) * r__ + 42.313330701600911252) * r__ +
					1.);
		    }
			else
			{
				double r__ = q < 0. ? x : 1. - x;
				if (r__ < 0.) r__ = 0.;

				r__ = sqrt(-log(r__));
				if (r__ <= 5.)
				{
			    	r__ += -1.6;
			    	ret_val =
						(((((((r__ * 7.7454501427834140764e-4 +
				    	.0227238449892691845833) * r__ + .24178072517745061177) *
				    	r__ + 1.27045825245236838258) * r__ +
				    	3.64784832476320460504) * r__ + 5.7694972214606914055) *
				    	r__ + 4.6303378461565452959) * r__ +
				    	1.42343711074968357734) /
						(((((((r__ *
				    	1.05075007164441684324e-9 + 5.475938084995344946e-4) *
				    	r__ + .0151986665636164571966) * r__ +
				    	.14810397642748007459) * r__ + .68976733498510000455) *
				    	r__ + 1.6763848301838038494) * r__ +
				    	2.05319162663775882187) * r__ + 1.);
				}
				else
				{
			    	r__ += -5.;
			    	ret_val =
						(((((((r__ * 2.01033439929228813265e-7 +
				    	2.71155556874348757815e-5) * r__ +
				    	.0012426609473880784386) * r__ + .026532189526576123093) *
				     	r__ + .29656057182850489123) * r__ +
				    	1.7848265399172913358) * r__ + 5.4637849111641143699) *
				    	r__ + 6.6579046435011037772) /
						(((((((r__ *
				    	2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
				    	r__ + 1.8463183175100546818e-5) * r__ +
				    	7.868691311456132591e-4) * r__ + .0148753612908506148525)
				    	* r__ + .13692988092273580531) * r__ +
				    	.59983220655588793769) * r__ + 1.);
				}

				if (q < 0.) ret_val = -ret_val;
		    }

		    return ret_val;
		}
	};



} } }

#endif
